# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5c Compiler 2017.01 Jan 23 2017
# Start time: 08:55:57 on Apr 15,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 08:55:58 on Apr 15,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GCASE_NAME=CASE_RANDOM_RANDOM_11 -GWR_NR=50 -GRD_NR=20 -Gwrite_order=0 -GSEED_VAL=98687577754 -Gread_order=1 
# Start time: 08:55:58 on Apr 15,2024
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  DON'T NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 6 (DIV)
#   operand_a = -13
#   operand_b = 13
# 
# Writing to register location 1: 
#   opcode = 1 (PASSA)
#   operand_a = -3
#   operand_b = 6
# 
# Writing to register location 2: 
#   opcode = 3 (ADD)
#   operand_a = -10
#   operand_b = 9
# 
# Writing to register location 3: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 3
# 
# Writing to register location 4: 
#   opcode = 0 (ZERO)
#   operand_a = 3
#   operand_b = 7
# 
# Writing to register location 5: 
#   opcode = 2 (PASSB)
#   operand_a = 7
#   operand_b = 0
# 
# Writing to register location 6: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 2
# 
# Writing to register location 7: 
#   opcode = 2 (PASSB)
#   operand_a = -14
#   operand_b = 12
# 
# Writing to register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 12
#   operand_b = 10
# 
# Writing to register location 9: 
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 2
# 
# Writing to register location 10: 
#   opcode = 1 (PASSA)
#   operand_a = -14
#   operand_b = 11
# 
# Writing to register location 11: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 1
# 
# Writing to register location 12: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 5
# 
# Writing to register location 13: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 12
# 
# Writing to register location 14: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 11
# 
# Writing to register location 15: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 9
# 
# Writing to register location 16: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 4
# 
# Writing to register location 17: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 3
# 
# Writing to register location 18: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 13
# 
# Writing to register location 19: 
#   opcode = 5 (MULT)
#   operand_a = -3
#   operand_b = 6
# 
# Writing to register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -10
#   operand_b = 5
# 
# Writing to register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -11
#   operand_b = 9
# 
# Writing to register location 22: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 13
# 
# Writing to register location 23: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 7
# 
# Writing to register location 24: 
#   opcode = 1 (PASSA)
#   operand_a = -9
#   operand_b = 10
# 
# Writing to register location 25: 
#   opcode = 4 (SUB)
#   operand_a = -6
#   operand_b = 9
# 
# Writing to register location 26: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 4
# 
# Writing to register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 4
#   operand_b = 3
# 
# Writing to register location 28: 
#   opcode = 2 (PASSB)
#   operand_a = 3
#   operand_b = 4
# 
# Writing to register location 29: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 10
# 
# Writing to register location 30: 
#   opcode = 6 (DIV)
#   operand_a = 10
#   operand_b = 9
# 
# Writing to register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 6
# 
# Writing to register location 0: 
#   opcode = 5 (MULT)
#   operand_a = 6
#   operand_b = 7
# 
# Writing to register location 1: 
#   opcode = 1 (PASSA)
#   operand_a = -9
#   operand_b = 13
# 
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = -3
#   operand_b = 9
# 
# Writing to register location 3: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 12
# 
# Writing to register location 4: 
#   opcode = 2 (PASSB)
#   operand_a = -4
#   operand_b = 7
# 
# Writing to register location 5: 
#   opcode = 6 (DIV)
#   operand_a = -9
#   operand_b = 10
# 
# Writing to register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = -6
#   operand_b = 6
# 
# Writing to register location 7: 
#   opcode = 1 (PASSA)
#   operand_a = 6
#   operand_b = 0
# 
# Writing to register location 8: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 1
# 
# Writing to register location 9: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 3
# 
# Writing to register location 10: 
#   opcode = 7 (MOD)
#   operand_a = -13
#   operand_b = 6
# 
# Writing to register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 15
# 
# Writing to register location 12: 
#   opcode = 2 (PASSB)
#   operand_a = -1
#   operand_b = 8
# 
# Writing to register location 13: 
#   opcode = 2 (PASSB)
#   operand_a = -8
#   operand_b = 10
# 
# Writing to register location 14: 
#   opcode = 5 (MULT)
#   operand_a = -6
#   operand_b = 2
# 
# Writing to register location 15: 
#   opcode = 3 (ADD)
#   operand_a = -14
#   operand_b = 13
# 
# Writing to register location 16: 
#   opcode = 1 (PASSA)
#   operand_a = -3
#   operand_b = 3
# 
# Writing to register location 17: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 9
# 
# 
# Reading back the same register locations written...
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 6
# 
#   rezulat = -1
# 
# 
#  Iteration = 31 
# : opcode = 7 (MOD)  
# operand_a = -7 
#  operand_b = 6 
#  expected result = -1  
#  actual result = -1 
#  Passed 
# 
# Read from register location 30: 
#   opcode = 6 (DIV)
#   operand_a = 10
#   operand_b = 9
# 
#   rezulat = 1
# 
# 
#  Iteration = 30 
# : opcode = 6 (DIV)  
# operand_a = 10 
#  operand_b = 9 
#  expected result = 1  
#  actual result = 1 
#  Passed 
# 
# Read from register location 29: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 10
# 
#   rezulat = -12
# 
# 
#  Iteration = 29 
# : opcode = 1 (PASSA)  
# operand_a = -12 
#  operand_b = 10 
#  expected result = -12  
#  actual result = -12 
#  Passed 
# 
# Read from register location 28: 
#   opcode = 2 (PASSB)
#   operand_a = 3
#   operand_b = 4
# 
#   rezulat = 4
# 
# 
#  Iteration = 28 
# : opcode = 2 (PASSB)  
# operand_a = 3 
#  operand_b = 4 
#  expected result = 4  
#  actual result = 4 
#  Passed 
# 
# Read from register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 4
#   operand_b = 3
# 
#   rezulat = 7
# 
# 
#  Iteration = 27 
# : opcode = 4 (SUB)  
# operand_a = 4 
#  operand_b = 3 
#  expected result = 1  
#  actual result = 7 
#  Failed 
# 
# Read from register location 26: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 4
# 
#   rezulat = -11
# 
# 
#  Iteration = 26 
# : opcode = 3 (ADD)  
# operand_a = -7 
#  operand_b = 4 
#  expected result = -3  
#  actual result = -11 
#  Failed 
# 
# Read from register location 25: 
#   opcode = 4 (SUB)
#   operand_a = -6
#   operand_b = 9
# 
#   rezulat = 3
# 
# 
#  Iteration = 25 
# : opcode = 4 (SUB)  
# operand_a = -6 
#  operand_b = 9 
#  expected result = -15  
#  actual result = 3 
#  Failed 
# 
# Read from register location 24: 
#   opcode = 1 (PASSA)
#   operand_a = -9
#   operand_b = 10
# 
#   rezulat = -9
# 
# 
#  Iteration = 24 
# : opcode = 1 (PASSA)  
# operand_a = -9 
#  operand_b = 10 
#  expected result = -9  
#  actual result = -9 
#  Passed 
# 
# Read from register location 23: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 7
# 
#   rezulat = 7
# 
# 
#  Iteration = 23 
# : opcode = 2 (PASSB)  
# operand_a = 13 
#  operand_b = 7 
#  expected result = 7  
#  actual result = 7 
#  Passed 
# 
# Read from register location 22: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 13
# 
#   rezulat = 9
# 
# 
#  Iteration = 22 
# : opcode = 7 (MOD)  
# operand_a = 9 
#  operand_b = 13 
#  expected result = 9  
#  actual result = 9 
#  Passed 
# 
# Read from register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -11
#   operand_b = 9
# 
#   rezulat = -99
# 
# 
#  Iteration = 21 
# : opcode = 5 (MULT)  
# operand_a = -11 
#  operand_b = 9 
#  expected result = -99  
#  actual result = -99 
#  Passed 
# 
# Read from register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -10
#   operand_b = 5
# 
#   rezulat = -10
# 
# 
#  Iteration = 20 
# : opcode = 1 (PASSA)  
# operand_a = -10 
#  operand_b = 5 
#  expected result = -10  
#  actual result = -10 
#  Passed 
# 
# Read from register location 19: 
#   opcode = 5 (MULT)
#   operand_a = -3
#   operand_b = 6
# 
#   rezulat = -18
# 
# 
#  Iteration = 19 
# : opcode = 5 (MULT)  
# operand_a = -3 
#  operand_b = 6 
#  expected result = -18  
#  actual result = -18 
#  Passed 
# 
# Read from register location 18: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 13
# 
#   rezulat = 0
# 
# 
#  Iteration = 18 
# : opcode = 6 (DIV)  
# operand_a = 3 
#  operand_b = 13 
#  expected result = 0  
#  actual result = 0 
#  Passed 
# 
# Read from register location 17: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 9
# 
#   rezulat = 27
# 
# 
#  Iteration = 17 
# : opcode = 5 (MULT)  
# operand_a = 3 
#  operand_b = 9 
#  expected result = 27  
#  actual result = 27 
#  Passed 
# 
# Read from register location 16: 
#   opcode = 1 (PASSA)
#   operand_a = -3
#   operand_b = 3
# 
#   rezulat = -3
# 
# 
#  Iteration = 16 
# : opcode = 1 (PASSA)  
# operand_a = -3 
#  operand_b = 3 
#  expected result = -3  
#  actual result = -3 
#  Passed 
# 
# Read from register location 15: 
#   opcode = 3 (ADD)
#   operand_a = -14
#   operand_b = 13
# 
#   rezulat = -27
# 
# 
#  Iteration = 15 
# : opcode = 3 (ADD)  
# operand_a = -14 
#  operand_b = 13 
#  expected result = -1  
#  actual result = -27 
#  Failed 
# 
# Read from register location 14: 
#   opcode = 5 (MULT)
#   operand_a = -6
#   operand_b = 2
# 
#   rezulat = -12
# 
# 
#  Iteration = 14 
# : opcode = 5 (MULT)  
# operand_a = -6 
#  operand_b = 2 
#  expected result = -12  
#  actual result = -12 
#  Passed 
# 
# Read from register location 13: 
#   opcode = 2 (PASSB)
#   operand_a = -8
#   operand_b = 10
# 
#   rezulat = 10
# 
# 
#  Iteration = 13 
# : opcode = 2 (PASSB)  
# operand_a = -8 
#  operand_b = 10 
#  expected result = 10  
#  actual result = 10 
#  Passed 
# 
# Read from register location 12: 
#   opcode = 2 (PASSB)
#   operand_a = -1
#   operand_b = 8
# 
#   rezulat = 8
# 
# 
#  Iteration = 12 
# : opcode = 2 (PASSB)  
# operand_a = -1 
#  operand_b = 8 
#  expected result = 8  
#  actual result = 8 
#  Passed 
# 
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 15
# 
#   rezulat = 0
# 
# 
#  Iteration = 11 
# : opcode = 0 (ZERO)  
# operand_a = -10 
#  operand_b = 15 
#  expected result = 0  
#  actual result = 0 
#  Passed 
# 
# 
#  Failed test: 4
# 
#  Passed test: 17
# 
#  Passed test 17 out of 21
# File openned successfully
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  DON'T NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(93)
#    Time: 746 ns  Iteration: 1  Instance: /top/test
# End time: 08:55:58 on Apr 15,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
